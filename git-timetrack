#!/bin/bash

# Copyright (C) 2010 Daniel Garcia Moreno <dani@danigm.net>
# Copyright (C) 2010 Eduardo Robles Elvira <edulix@wadobo.com>
#
# This software may be used and distributed according to the terms of the
# GNU General Public License version 3 or any later version, incorporated
# herein by reference.

export GIT_NOTES_DISPLAY_REF="refs/notes/timetracker"
function show_help {
    echo "usage: git timetrack command [options]"
    echo ""
    echo "Current timer commands:"
    echo "    start, -s, --start                start/continue counting time spent"
    echo "    hacking, -k, --start-hacking        start/continue counting time spent, won't stop (only reset) on commit"
    echo "    stop, -p, --stop                 stop/pause counting time spent"
    echo "    reset, -r, --reset                reset counting time spent"
    echo "    add, -g  --add <[-]minutes>     add (or substract) time from the timer"
    echo "    set, -e, --set <minutes>        set time spent in minutes"
    echo "    timesince, -ts, --timesince           set time spent since last commit"
    echo "    current, -c, --current              time spent currently in next commit"
    echo ""
    echo "Commit related commands:"
    echo "    ammend, -a, --amend [<object>]     set currently spent time to last commit or to the given one"
    echo "    delete, -d, --delete [<object>]    delete time-spent to last commit or to the given one"
    echo "    summary, -u, --summary [<opts>]     show summary of total time spent. takes similar options as git    log"
    echo "    log, -l, --log [<opts>]         show git log with notes translates to human time"
    echo "    get-time, -gt, --get-time [<object>] gets time from last commit or the given one"
    echo ""
    echo "Multiple timers commands:"
    echo "    -st  --save-timer <name>   save current timer to a named timer for later reuse"
    echo "    -ut, --use-timer <name>    sets an existent timer as current one"
    echo "    -dt, --del-timer <name>    delete an existent timer"
    echo "    -ti, --timer-info <name>   shows a timer information"
    echo "    -lt, --list-timers         list existing timers"
    echo ""
    echo "Configuration commands:"
    echo "    addhooks, -o, --addhooks             adds post-commit hook and post-merge to the project"
    echo "    config, -n, --config [<remote>]    adds config to the project to pull and push timetrack info"
    echo "    init, -i, --init                 setup timetrack environment, hooks and config for origin"
    echo "    merge, -m, --merge [<remote>]     merge timetracker notes from remote branch (origin by default)"
}

function human_time() {
    s=$1
    if [ -z $s ]; then s=0; fi
    m=0
    while [ $s -ge 60 ]
    do
        m=$(( $m + $s / 60 ))
        s=$(( $s % 60 ))
    done
    h=0
    while [ $m -ge 60 ]
    do
        h=$(( $h + $m / 60 ))
        m=$(( $m % 60 ))
    done

    str=""
    if [ $h -ne 0 ]; then str=$str" $h hours"; fi
    if [ $m -ne 0 ]; then str=$str" $m minutes"; fi
    if [ -z "$str" ]
    then
        str=$str" $s seconds"
    else
        if [ $s -ne 0 ]; then str=$str" $s seconds"; fi
    fi

    echo $str
}

function current_time() {
    start_date=$(git config --get timetrack.start)
    current_date=$(date +%s)
    spent_date=$(git config --get timetrack.spent)
    if [ -z $spent_date ]; then spent_date=0; fi

    if [ $start_date ]
    then
        spent=$(( $spent_date + $current_date - $start_date ))
    else
        if [ $spent_date -gt 0 ]
        then
            spent=$spent_date
        fi
    fi

    echo $spent
}

function user_time_dedication() {
    user=$1
    shift
    alltimes=$(git log --author="$user" $* | grep "Time-spent: " | cut -d":" -f2)

    total=0
    for t in $alltimes
    do
        total=$(( $total + $t ))
    done

    echo $total
}

case $1 in
    start|-s|--start)
        git config timetrack.start $(date +%s)
        ;;

    hacking|-k|--start-hacking)
        git config timetrack.start $(date +%s)
        git config timetrack.hacking "true"
        ;;

    stop|-p|--stop)
        start_date=$(git config --get timetrack.start)
        current_date=$(date +%s)
        spent_date=$(git config --get timetrack.spent)
        if [ -z $spent_date ]; then spent_date=0; fi

        if [ $start_date ]
        then
            spent=$(( $spent_date + $current_date - $start_date ))
            git config --remove-section timetrack 2>/dev/null
            git config timetrack.spent $spent
        else
            echo "Stop before start? I don't think so."
        fi
        ;;

    current|-c|--current)
        spent=$(current_time)
        if [ -z $spent ]
        then
            echo "There's no time information :("
        else
            echo "time spent in next commit: $(human_time $spent)"
            hacking=$(git config --get timetrack.hacking)
            start_date=$(git config --get timetrack.start)
            [ $start_date ] && echo "timer counting" || echo "timer stopped"
            [ $hacking ] && echo "hacking mode activated"
        fi
        ;;

    reset|-r|--reset)
        git config --remove-section timetrack 2>/dev/null
        ;;

    set|-e|--set)
        git config --remove-section timetrack 2>/dev/null
        git config timetrack.spent $(( $2 * 60 ))
        ;;

    add|-g|--add)
        spent_date=$(git config --get timetrack.spent)
        if [ -z $spent_date ]; then spent_date=0; fi
        git config timetrack.spent $(( $2 * 60 + $spent_date ))
        ;;

    timer-save|-st|--save-timer)
        spent=$(current_time)
        git config timetrack.$2.spent $spent
        ;;

    timer-use|-ut|--use-timer)
        spent=$(git config timetrack.$2.spent)
        [ -z $spent ] && echo "timer $2 not found" && exit 1
        git config --remove-section timetrack 2>/dev/null
        git config timetrack.spent $spent
        ;;

    timer-del|-dt|--del-timer)
        spent=$(git config timetrack.$2.spent)
        [ -z $spent ] && echo "timer $2 not found" && exit 1
        git config --remove-section timetrack.$2 2>/dev/null
        ;;

    info|-ti|---timer-info)
        spent=$(git config timetrack.$2.spent)
        [ -z $spent ] && echo "timer $2 not found" && exit 1
        echo "time spent in $2: $(human_time $spent)"
        ;;

    list|-lt|--list-timers)
        timers=$(git config -l | grep '^timetrack\..*\.' | cut -d . -f 2 | sort -u)
        count=0
        echo "Saved timers:"
        for i in $timers
        do
            count=$[ $count + 1 ]
            spent=$(git config timetrack.$i.spent)
            printf " %-25s %s\n" "$i" "$(human_time $spent)"
        done
        printf "\n%s timers\n" "$count"
        ;;

    ammend|-a|--amend)
        git timetrack -p > /dev/null
        spent=$(git config timetrack.spent)
        hacking=$(git config --get timetrack.hacking)
        git config --remove-section timetrack 2> /dev/null

        if [ $spent ]
        then
            git notes --ref timetracker add -f -m "Time-spent: $spent" $2
        fi
        if [ $hacking ]
        then
            git config timetrack.start $(date +%s)
            git config timetrack.hacking $hacking
        fi
        ;;

    delete|-d|--delete)
        git notes --ref timetracker remove $2
        ;;

    summary|-u|--summary)
        shift
        allusers=$(git log --oneline --pretty="format: %an <%ae>" $* | sort | uniq)
        alltimes=$(git log $* | grep "Time-spent:"  | cut -d":" -f2)

        total=0
        for t in $alltimes
        do
            total=$(( $total + $t ))
        done

        echo "total time spent by authors"
        printf "$allusers\n" | while read author
        do
            dedication=$(user_time_dedication "$author" $*)
            [ $dedication -ne 0 ] && printf " %-49s %s\n" "$author" "$(human_time $dedication)"
        done

        printf "\n%-50s %s\n" "total time spent in this project" "$(human_time $total)"
        printf "%-50s %s\n" "time spent in next comit" "$(human_time $(current_time))"

        hacking=$(git config --get timetrack.hacking)
        if [ $hacking ]
        then
            echo "hacking mode activated"
        fi
        ;;

    log|-l|--log)
        shift
        git log --color $* | sed "s/Time-spent: \([0-9]\+\)/git timetrack --human-time \1/e" | less -R
        ;;

    get-time|-gt|--get-time)
        time=$(git log $2 -1 | grep "Time-spent:"  | cut -d":" -f2)
        [ -z $time ] && echo "Error, the specified commit does not have a Time-spent annotation" && exit 1
        git config --remove-section timetrack 2>/dev/null
        git config timetrack.spent $time
        ;;

    --human-time)
        echo "    Time-spent: "$(human_time $2)
        ;;

    addhooks|-o|--addhooks)

        gitdir="$(git rev-parse --git-dir)"
        if [ ! -d $gitdir ]
        then
            echo "That isn't a git root directory. I wont do anything"
        else
        	hooksdir="$gitdir/hooks"
        	if [ ! -d $hooksdir ]
        	then 
        		mkdir $hooksdir 
        	fi

            post_commit="$hooksdir/post-commit"

            echo '#!/bin/bash

hacking=$(git config timetrack.hacking)
git timetrack -p > /dev/null
spent=$(git config timetrack.spent)
git config --remove-section timetrack 2> /dev/null

if [ $spent ]
then
    git notes --ref timetracker add -m "Time-spent: $spent"

    if [ $hacking ]
    then
        git config timetrack.start $(date +%s)
        git config timetrack.hacking $hacking
    fi
fi' > $post_commit

            chmod +x $post_commit

            post_merge="$hooksdir/post-merge"

            echo '#!/bin/bash

GITDIR=$(git rev-parse --git-dir)
for remote in $GITDIR/refs/notes/remotes/*
do
    git timetrack --merge "$(basename $remote)"
done' > $post_merge

            chmod +x $post_merge
            echo "hooks created"
        fi
        ;;

    config|-n|--config)
        remote=$2
        if [ -z $remote ]
        then
            remote=origin
        fi

        git config --add remote.$remote.push "refs/notes/timetracker:refs/notes/timetracker"
        # this shouldn't be needed
        # git config --add remote.$remote.push "refs/heads/master:refs/heads/master"
        git config --add remote.$remote.fetch "+refs/notes/timetracker:refs/notes/remotes/$remote/timetracker"
        git config notes.rewriteRef "refs/notes/timetracker"
        git config notes.displayRef "refs/notes/timetracker"

        echo "git timetrack configured, now, run git pull if you don't want problems"
        ;;

    init|-i|--init)
        git timetrack --addhooks
        git timetrack --config
        ;;
    merge|-m|--merge)
        remote=$2
        if [ -z $remote ]
        then
            remote=origin
        fi

        remote_ref="refs/notes/remotes/$remote/timetracker"
        git notes --ref timetracker merge $remote_ref
        ;;
     timesince|-ts|--timesince)
        current_date=$(date +%s)
        last=$(git log --date=raw -n 1 | grep Date: | sed -E 's/ +/ /g' | cut -d " " -f2)
        t=$(( current_date - last ))
        git timetrack -s
        git timetrack -e $(( $t / 60 ))
        ;;
    *)
        show_help
        ;;
esac
